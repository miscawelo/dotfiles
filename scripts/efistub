#!/usr/bin/bash

[[ $(id -u) -eq 0 ]] || { echo >&2 "Must be root to run script"; exit 1; }

distro="Arch Linux"
espDir="/boot"
drive="nvme0n1"
driveMainPartition="p3"
swapfile="/swap/swapfile"

create-ukis () {
    rootUUID=$(blkid | grep $drive$driveMainPartition | cut -d '"' -f 2)
    luksOptions=""
    swap_uuid=$(blkid | grep cryptroot | cut -d '"' -f 4)
    swap_offset=$(btrfs inspect-internal map-swapfile -r $swapfile)
    hibernation="resume=UUID="$swap_uuid" resume-offset="$swap_offset
    kernelParams="nowatchdog amd_pstate=active rootflags=subvol=@ zswap.enabled=0 amdgpu.ppfeaturemask=0xffffffff"

    echo "root=UUID=$rootUUID $luksOptions $hibernation $kernelParams" > /etc/kernel/cmdline


    for vmlinuz in $espDir/vmlinuz* ; do
        kernel=${vmlinuz#*-}

        mv $espDir/EFI/Linux/$kernel.efi $espDir/EFI/Linux/$kernel-backup.efi

        cat $espDir/amd-ucode.img $espDir/booster-$kernel.img > /tmp/$kernel.img
        stubLine=$(objdump -h "/usr/lib/systemd/boot/efi/linuxx64.efi.stub" | tail -2 | head -1)
        stubSize=0x$(echo "$stubLine" | awk '{print $3}')
        stubOffs=0x$(echo "$stubLine" | awk '{print $4}')
        osrelOffs=$((stubSize + stubOffs))
        cmdlineOffs=$((osrelOffs + $(stat -c%s "/usr/lib/os-release")))
        linuxOffs=$((cmdlineOffs + $(stat -c%s "/etc/kernel/cmdline")))
        initrdOffs=$((linuxOffs + $(stat -c%s "$vmlinuz")))

        objcopy \
            --add-section .osrel="/usr/lib/os-release" --change-section-vma .osrel=$(printf 0x%x $osrelOffs) \
            --add-section .cmdline="/etc/kernel/cmdline" --change-section-vma .cmdline=$(printf 0x%x $cmdlineOffs) \
            --add-section .linux="$vmlinuz" --change-section-vma .linux=$(printf 0x%x $linuxOffs) \
            --add-section .initrd="/tmp/$kernel.img" --change-section-vma .initrd=$(printf 0x%x $initrdOffs) \
            "/usr/lib/systemd/boot/efi/linuxx64.efi.stub" "$espDir/EFI/Linux/$kernel.efi"

        sbctl sign -s $espDir/EFI/Linux/$kernel.efi &> /dev/null
        sbctl sign -s $espDir/EFI/Linux/$kernel-backup.efi &> /dev/null
    done
}

update-efistub () {
    for vmlinuz in /boot/vmlinuz* ; do
        kernel=${vmlinuz#*-}
        label="$distro ($kernel)"

        efibootmgr -q -BL "$label"
        efibootmgr -q -BL "$label (backup)"

        efibootmgr -q -c -d /dev/$drive -L "$label" -l EFI/Linux/$kernel.efi
        efibootmgr -q -c -d /dev/$drive -L "$label (backup)" -l EFI/Linux/$kernel-backup.efi
    done

    efibootmgr

    read -p "Boot order: " bootOrder
    efibootmgr -o $bootOrder
    while [ $? -ne 0 ]; do
        read -p "Boot order: " bootOrder
        efibootmgr -o $bootOrder
    done
}

getopts 'cesh' action
case "$action" in
    c)
        create-ukis
        exit 0
        ;;
    e)
        update-efistub
        exit 0
        ;;
    s)
        sbctl list-files
        efibootmgr -o $bootOrder
        exit 0
        ;;
    h)
        echo -e "Usage: $(basename $0) <action>\n\nActions:\n  -c  Create Unified Kernel Images\n  -e  Update EFISTUB entries\n  -s  Check status"
        exit 0
        ;;

    ?)
        echo "Usage: $(basename $0) <action>, use -h to see all actions."
        exit 1
        ;;
esac
